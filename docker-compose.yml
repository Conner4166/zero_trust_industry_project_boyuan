services:

  postgres:
    image: postgres:14
    container_name: my-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - zero-trust-net
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.0
    container_name: my-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin123
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    command: start-dev
    networks:
      - zero-trust-net
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: my-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zero-trust-net
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: my-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - zero-trust-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: my-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - zero-trust-net
    restart: unless-stopped

  #OpenZiti服务

  ziti-controller:
    image: openziti/ziti-controller:latest
    container_name: ziti-controller
    environment:
      ZITI_BOOTSTRAP: "true"
      ZITI_PWD: "admin123"                       # controller 管理员密码
      ZITI_CTRL_ADVERTISED_ADDRESS: ziti-controller
      ZITI_CTRL_ADVERTISED_PORT: "1280"
    ports:
      - "1280:1280"  # Edge Management API（ziti edge login 用）
      - "6262:6262"  # Control plane
    volumes:
      - ziti_ctrl_data:/persistent
    networks:
      - zero-trust-net
    restart: unless-stopped

  ziti-edge-router:
    image: openziti/ziti-router:latest
    container_name: ziti-edge-router
    environment:
      ZITI_BOOTSTRAP: "true"
      ZITI_ENROLL_TOKEN: "${ZITI_ENROLL_TOKEN}"
      ZITI_CTRL_ADVERTISED_ADDRESS: ziti-controller
      ZITI_CTRL_ADVERTISED_PORT: "1280"
      ZITI_ROUTER_NAME: edge-router-1
      ZITI_ROUTER_ADVERTISED_ADDRESS: ziti-edge-router
      ZITI_ROUTER_PORT: "3022"
    ports:
      - "3022:3022"
    volumes:
      - ziti_router_data:/persistent
    depends_on:
      ziti-controller:
        condition: service_started 
    networks:
      - zero-trust-net
    restart: unless-stopped


  # Flask网关原
  flask-gateway:
    build: 
      context: ./zero-trust-gateway
      dockerfile: Dockerfile
    container_name: flask-gateway
    environment:
      KEYCLOAK_URL: http://keycloak:8080
      REALM: my-company
      CLIENT_ID: my-app
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CSV_PATH: /app/out/decisions.csv
    ports:
      - "5000:5000"
    volumes:
      - ./zero-trust-gateway:/app
      - ./zero-trust-gateway/out:/app/out
    depends_on:
      - redis
      - keycloak
    networks:
      - zero-trust-net
    restart: unless-stopped

  # Flask网关
  flask-gateway-ziti:
    build: 
      context: ./zero-trust-gateway
      dockerfile: Dockerfile
    container_name: flask-gateway-ziti
    environment:
      KEYCLOAK_URL: http://keycloak:8080
      REALM: my-company
      CLIENT_ID: my-app
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CSV_PATH: /app/out/decisions_ziti.csv
      ZITI_CONTROLLER: ziti-controller:1280
      ZITI_IDENTITY_FILE: /app/identities/gateway.json
      USE_ZITI: "true"
    ports:
      - "5001:5001"
    volumes:
      - ./zero-trust-gateway:/app
      - ./zero-trust-gateway/out:/app/out
      - ./openziti/identities:/app/identities:ro
    depends_on:
      - redis
      - keycloak
      - ziti-controller
    command: python app_ziti.py
    networks:
      - zero-trust-net
    restart: unless-stopped

  ziti-gateway:
    image: openziti/ziti-edge-tunnel:latest
    container_name: ziti-gateway
    cap_add:
      - NET_ADMIN
      - NET_RAW
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ./openziti/identities:/ziti-edge-tunnel:rw

    networks:
      - zero-trust-net
    restart: unless-stopped

    command: ["run","--identity","/ziti-edge-tunnel/flask-gateway.json"] 

networks:
  zero-trust-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ziti_ctrl_data:
  ziti_router_data:
